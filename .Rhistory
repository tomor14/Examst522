stop("x is missing")
}
if(!is.numeric(x)){
stop("x has to be numeric")
}
if(missing(p)){
e <- 1/length(x)*sum(x) # if p not given, the expected probability is uniform
}
if(!missing(p)){
e <- p*sum(x) # the number of expected values
}
chi <- sum((((x-e)^2)/e)) # chi-squared statistic
return(chi)
}
chi.goodness(x)
chi.goodness <- function(x,p){
if(missing(x)){
stop("x is missing")
}
if(!is.numeric(x)){
stop("x has to be numeric")
}
if(missing(p)){
e <- 1/length(x)*sum(x) # if p not given, the expected probability is uniform
}
if(length(p) == 1){
if(!(p*length(x)==1)){
stop("the sum of the p has to be 1")
}
}
else{
if(!(sum(p)==1)){
stop("the sum of the p has to be 1")
}
if(!(length(x) == length(p))){
stop("x and p must have same length")
}
}
if(!missing(p)){
e <- p*sum(x) # the number of expected values
}
chi <- sum((((x-e)^2)/e)) # chi-squared statistic
return(chi)
}
chi.goodness(x)
library(Exam)
library(Exam)
source('~/Documents/Exam/R/lin.model.R')
EV <- RSS/(n-p-1)
SE <- sqrt(diag(EV*solve(t(M) %*% M)))
tVal <- B/SE
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
#print(M)
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y)
#print(B)
Yhat <- S%*%B
#print(Yhat)
residual <- Y-Yhat
#print(residual)
RSE <- sd(residual)
#print(RSE)
RSS <- sum(residual^2)
#print(RSS)
SST <- sum((Y-mean(Y))^2)
#print(SST)
R2 <- 1-RSS/SST
#print(R2)
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1))
#print(R2adj)
SSreg <- sum((Yhat-mean(Y))^2)
#print(SSreg)
Fstat <- (SSreg/p)/(RSS/(n-1-p))
#print(Fstat)
df <- n-p-1
#print(df)
pval <- 1-pf(Fstat, p, n-p-1)
#print(pval)
EV <- RSS/(n-p-1)
SE <- sqrt(diag(EV*solve(t(M) %*% M)))
tVal <- B/SE
return(list("Residuales" = data.frame("Min" = mean(residual), "1st qu" = quantile(residual, .25), "Median" = quantile(residual, .5), "3st qu" = quantile(residual, .75), "Max" = max(residual), row.names=" ")
"Coefficints" = data.frame("Estimate" = B, "Standard error" = )))
}
pr <- 2*(1-pt(tVal, df))
tVal <- B/SE
B <- solve(t(M)%*%M)%*%(t(M)%*%Y)
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
#print(M)
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y)
#print(B)
Yhat <- S%*%B
#print(Yhat)
residual <- Y-Yhat
#print(residual)
RSE <- sd(residual)
#print(RSE)
RSS <- sum(residual^2)
#print(RSS)
SST <- sum((Y-mean(Y))^2)
#print(SST)
R2 <- 1-RSS/SST
#print(R2)
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1))
#print(R2adj)
SSreg <- sum((Yhat-mean(Y))^2)
#print(SSreg)
Fstat <- (SSreg/p)/(RSS/(n-1-p))
#print(Fstat)
df <- n-p-1
#print(df)
pval <- 1-pf(Fstat, p, n-p-1)
#print(pval)
EV <- RSS/(n-p-1)
SE <- sqrt(diag(EV*solve(t(M) %*% M)))
tVal <- B/SE
pr <- 2*(1-pt(tVal, df))
library(Exam)
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
#print(M)
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y)
#print(B)
Yhat <- S%*%B
#print(Yhat)
residual <- Y-Yhat
#print(residual)
RSE <- sd(residual)
#print(RSE)
RSS <- sum(residual^2)
#print(RSS)
SST <- sum((Y-mean(Y))^2)
#print(SST)
R2 <- 1-RSS/SST
#print(R2)
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1))
#print(R2adj)
SSreg <- sum((Yhat-mean(Y))^2)
#print(SSreg)
Fstat <- (SSreg/p)/(RSS/(n-1-p))
#print(Fstat)
df <- n-p-1
#print(df)
pval <- 1-pf(Fstat, p, n-p-1)
#print(pval)
EV <- RSS/(n-p-1)
SE <- sqrt(diag(EV*solve(t(M) %*% M)))
tVal <- B/SE
pr <- 2*(1-pt(tVal, df))
return(list("Residuales" = data.frame("Min" = mean(residual), "1st qu" = quantile(residual, .25), "Median" = quantile(residual, .5), "3st qu" = quantile(residual, .75), "Max" = max(residual), row.names=" "),
"Coefficints" = data.frame("Estimate" = B, "Standard error" = SE, "t value" = tVal, "Pr(<|t|)" = pr)))
cat("Residual standard error: ", RSE, "on", df, "degrees of freedom \n")
cat("Multiple R-squared: ", R2, "Adjusted R-squares: ", R2.adjusted, "\n")
cat("F-statistic: ", Fstat, "on", p, "and", df, "df", "p-value: ", pval)
}
lin.model()
x <- cars$speed
y <- cars$dist
lin.model(y~x)
lin.model(y~x)
x
y
lin.model(y~x)
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
#print(M)
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y)
#print(B)
Yhat <- S%*%B
#print(Yhat)
residual <- Y-Yhat
#print(residual)
RSE <- sd(residual)
#print(RSE)
RSS <- sum(residual^2)
#print(RSS)
SST <- sum((Y-mean(Y))^2)
#print(SST)
R2 <- 1-RSS/SST
#print(R2)
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1))
#print(R2adj)
SSreg <- sum((Yhat-mean(Y))^2)
#print(SSreg)
Fstat <- (SSreg/p)/(RSS/(n-1-p))
#print(Fstat)
df <- n-p-1
#print(df)
pval <- 1-pf(Fstat, p, n-p-1)
#print(pval)
EV <- RSS/(n-p-1)
SE <- sqrt(diag(EV*solve(t(M) %*% M)))
tVal <- B/SE
pr <- 2*(1-pt(tVal, df))
return(list("Residuales" = data.frame("Min" = mean(residual), "1st qu" = quantile(residual, .25), "Median" = quantile(residual, .5), "3st qu" = quantile(residual, .75), "Max" = max(residual), row.names=" "),
"Coefficints" = data.frame("Estimate" = B, "Standard error" = SE, "t value" = tVal, "Pr(<|t|)" = pr)))
cat("Residual standard error: ", RSE, "on", df, "degrees of freedom \n")
cat("Multiple R-squared: ", R2, "Adjusted R-squares: ", R2.adjusted, "\n")
cat("F-statistic: ", Fstat, "on", p, "and", df, "df", "p-value: ", pval)
}
lin.model(y~x)
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
#print(M)
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y)
#print(B)
Yhat <- M%*%B
#print(Yhat)
residual <- Y-Yhat
#print(residual)
RSE <- sd(residual)
#print(RSE)
RSS <- sum(residual^2)
#print(RSS)
SST <- sum((Y-mean(Y))^2)
#print(SST)
R2 <- 1-RSS/SST
#print(R2)
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1))
#print(R2adj)
SSreg <- sum((Yhat-mean(Y))^2)
#print(SSreg)
Fstat <- (SSreg/p)/(RSS/(n-1-p))
#print(Fstat)
df <- n-p-1
#print(df)
pval <- 1-pf(Fstat, p, n-p-1)
#print(pval)
EV <- RSS/(n-p-1)
SE <- sqrt(diag(EV*solve(t(M) %*% M)))
tVal <- B/SE
pr <- 2*(1-pt(tVal, df))
return(list("Residuales" = data.frame("Min" = mean(residual), "1st qu" = quantile(residual, .25), "Median" = quantile(residual, .5), "3st qu" = quantile(residual, .75), "Max" = max(residual), row.names=" "),
"Coefficints" = data.frame("Estimate" = B, "Standard error" = SE, "t value" = tVal, "Pr(<|t|)" = pr)))
cat("Residual standard error: ", RSE, "on", df, "degrees of freedom \n")
cat("Multiple R-squared: ", R2, "Adjusted R-squares: ", R2.adjusted, "\n")
cat("F-statistic: ", Fstat, "on", p, "and", df, "df", "p-value: ", pval)
}
lin.model(y~x)
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
#print(M)
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y)
#print(B)
Yhat <- M%*%B
#print(Yhat)
residual <- Y-Yhat
#print(residual)
RSE <- sd(residual)
#print(RSE)
RSS <- sum(residual^2)
#print(RSS)
SST <- sum((Y-mean(Y))^2)
#print(SST)
R2 <- 1-RSS/SST
#print(R2)
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1))
#print(R2adj)
SSreg <- sum((Yhat-mean(Y))^2)
#print(SSreg)
Fstat <- (SSreg/p)/(RSS/(n-1-p))
#print(Fstat)
df <- n-p-1
#print(df)
pval <- 1-pf(Fstat, p, n-p-1)
#print(pval)
EV <- RSS/(n-p-1)
SE <- sqrt(diag(EV*solve(t(M) %*% M)))
tVal <- B/SE
pr <- 2*(1-pt(tVal, df))
print(list("Residuales" = data.frame("Min" = mean(residual), "1st qu" = quantile(residual, .25), "Median" = quantile(residual, .5), "3st qu" = quantile(residual, .75), "Max" = max(residual), row.names=" "),
"Coefficints" = data.frame("Estimate" = B, "Standard error" = SE, "t value" = tVal, "Pr(<|t|)" = pr)))
cat("Residual standard error: ", RSE, "on", df, "degrees of freedom \n")
cat("Multiple R-squared: ", R2, "Adjusted R-squares: ", R2.adjusted, "\n")
cat("F-statistic: ", Fstat, "on", p, "and", df, "df", "p-value: ", pval)
}
lin.model(y~x)
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
#print(M)
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y)
#print(B)
Yhat <- M%*%B
#print(Yhat)
residual <- Y-Yhat
#print(residual)
RSE <- sd(residual)
#print(RSE)
RSS <- sum(residual^2)
#print(RSS)
SST <- sum((Y-mean(Y))^2)
#print(SST)
R2 <- 1-RSS/SST
#print(R2)
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1))
#print(R2adj)
SSreg <- sum((Yhat-mean(Y))^2)
#print(SSreg)
Fstat <- (SSreg/p)/(RSS/(n-1-p))
#print(Fstat)
df <- n-p-1
#print(df)
pval <- 1-pf(Fstat, p, n-p-1)
#print(pval)
EV <- RSS/(n-p-1)
SE <- sqrt(diag(EV*solve(t(M) %*% M)))
tVal <- B/SE
pr <- 2*(1-pt(tVal, df))
print(list("Residuales" = data.frame("Min" = mean(residual), "1st qu" = quantile(residual, .25), "Median" = quantile(residual, .5), "3st qu" = quantile(residual, .75), "Max" = max(residual), row.names=" "),
"Coefficints" = data.frame("Estimate" = B, "Standard error" = SE, "t value" = tVal, "Pr(<|t|)" = pr)))
cat("Residual standard error: ", RSE, "on", df, "degrees of freedom \n")
cat("Multiple R-squared: ", R2, "Adjusted R-squares: ", R2adj, "\n")
cat("F-statistic: ", Fstat, "on", p, "and", df, "df", "p-value: ", pval)
}
lin.model(y~x)
library(Exam)
data <- read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
father <- data$Father
mother <- data$Mother
gender <- data$Gender
height <- data$Height
ses <- data$SES
lin.model(height~father+mother+gender+ses)
lin.model(height~father+mother+gender+ses)
lin.model(height~father+mother+gender+ses)
lin.model(height~father+ses+mother+gender)
lin.model(height~father+ses+mother+gender)
lin.model(height~father+mother+gender+ses)
library(Exam)
lin.model(height~father+mother+gender+ses)
lin.model <- function(formula){
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y) # beta
Yhat <- M%*%B # estimated Y
residual <- Y-Yhat # residuals
RSE <- sd(residual) # residuals standard error
RSS <- sum(residual^2) # residuals sum of squares
SST <- sum((Y-mean(Y))^2) # total corrected sum of squares
R2 <- 1-RSS/SST # R^2
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1)) # ajusted R^2
SSreg <- sum((Yhat-mean(Y))^2) # regression sum of squares
Fstat <- (SSreg/p)/(RSS/(n-1-p)) # f-statistic
df <- n-p-1 # degrees of freedom
pval <- 1-pf(Fstat, p, n-p-1) # p-values
EV <- RSS/(n-p-1) # error variance
SE <- sqrt(diag(EV*solve(t(M) %*% M)))  # standard error
tVal <- B/SE # t-values
pr <- 2*(1-pt(abs(tVal), df)) # p-values
print(list("Residuales" = data.frame("Min" = mean(residual), "1st qu" = quantile(residual, .25), "Median" = quantile(residual, .5), "3st qu" = quantile(residual, .75), "Max" = max(residual), row.names=" "),
"Coefficints" = data.frame("Estimate" = B, "Standard error" = SE, "t value" = tVal, "Pr(<|t|)" = pr)))
cat("Residual standard error: ", RSE, "on", df, "degrees of freedom \n")
cat("Multiple R-squared: ", R2, "Adjusted R-squares: ", R2adj, "\n")
cat("F-statistic: ", Fstat, "on", p, "and", df, "df", "p-value: ", pval)
}
lin.model(height~father+mother+gender+ses)
lin.model(height~father+mother+gender+ses)
}
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y) # beta
Yhat <- M%*%B # estimated Y
residual <- Y-Yhat # residuals
RSE <- sd(residual) # residuals standard error
RSS <- sum(residual^2) # residuals sum of squares
SST <- sum((Y-mean(Y))^2) # total corrected sum of squares
R2 <- 1-RSS/SST # R^2
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1)) # ajusted R^2
SSreg <- sum((Yhat-mean(Y))^2) # regression sum of squares
Fstat <- (SSreg/p)/(RSS/(n-1-p)) # f-statistic
df <- n-p-1 # degrees of freedom
pval <- 1-pf(Fstat, p, n-p-1) # p-values
EV <- RSS/(n-p-1) # error variance
SE <- sqrt(diag(EV*solve(t(M) %*% M)))  # standard error
tVal <- B/SE # t-values
pr <- 2*(1-pt(abs(tVal), df)) # p-values
print(list("Residuales" = data.frame("Min" = mean(residual), "1st qu" = quantile(residual, .25), "Median" = quantile(residual, .5), "3st qu" = quantile(residual, .75), "Max" = max(residual), row.names=" "),
"Coefficints" = data.frame("Estimate" = B, "Standard error" = SE, "t value" = tVal, "Pr(<|t|)" = pr)))
cat("Residual standard error: ", RSE, "on", df, "degrees of freedom \n")
cat("Multiple R-squared: ", R2, "Adjusted R-squares: ", R2adj, "\n")
cat("F-statistic: ", Fstat, "on", p, "and", df, "df", "p-value: ", pval)
}
lin.model(height~father+mother+gender+ses)
library(Exam)
library(Exam)
lin.model <- function(formula){
Y <- eval(as.name(all.vars(formula)[1]))
X <- all.vars(formula)[2:length(all.vars(formula))]
f <- unlist(strsplit(X, " "))
W <- c()
for(i in 1:length(f)){
q <- as.name(f[i])
W <- append(W, eval(as.name(f[i])))
}
M <- matrix(c(rep(1,length(Y)), W), ncol=length(f)+1 )
n <- dim(M)[1]
p <- dim(M)[2]-1
B <- solve(t(M)%*%M)%*%(t(M)%*%Y) # beta
Yhat <- M%*%B # estimated Y
residual <- Y-Yhat # residuals
RSE <- sd(residual) # residuals standard error
RSS <- sum(residual^2) # residuals sum of squares
SST <- sum((Y-mean(Y))^2) # total corrected sum of squares
R2 <- 1-RSS/SST # R^2
R2adj <- 1-(RSS/(n-p-1))/(SST/(n-1)) # ajusted R^2
SSreg <- sum((Yhat-mean(Y))^2) # regression sum of squares
Fstat <- (SSreg/p)/(RSS/(n-1-p)) # f-statistic
df <- n-p-1 # degrees of freedom
pval <- 1-pf(Fstat, p, n-p-1) # p-values
EV <- RSS/(n-p-1) # error variance
SE <- sqrt(diag(EV*solve(t(M)%*%M)))  # standard error
tVal <- B/SE # t-values
pr <- 2*(1-pt(abs(tVal), df)) # p-values
print(list("Residuales" = data.frame("Min" = mean(residual), "1st qu" = quantile(residual, .25), "Median" = quantile(residual, .5), "3st qu" = quantile(residual, .75), "Max" = max(residual), row.names=" "),
"Coefficints" = data.frame("Estimate" = B, "Standard error" = SE, "t value" = tVal, "Pr(<|t|)" = pr)))
cat("Residual standard error: ", RSE, "on", df, "degrees of freedom \n")
cat("Multiple R-squared: ", R2, "Adjusted R-squares: ", R2adj, "\n")
cat("F-statistic: ", Fstat, "on", p, "and", df, "df", "p-value: ", pval)
}
lin.model(y~x)
library(Exam)
