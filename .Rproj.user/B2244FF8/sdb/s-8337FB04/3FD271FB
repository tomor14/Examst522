{
    "contents" : "#' @export\n#' @title Density estimate\n#' @usage dens.est(x, d, h, method)\n#' @keywords density estimate naive kernel\n#' @description Estimate the density of a variable, either using the naive estimator og the Gaussian kernel estimator.\n#' @param x is a numeric variable.\n#' @param d is a point to obtain the density. d has to be a positive integer.\n#' @param h is bandwith. h has to be a positive numeric.\n#' @param method is either the naive estimator or the Gaussian kernel estimator. The default is the naive estimator.\n#' @return If d is given, it returns the density for the point d. If d is not given, it returns a list containing the density to the following points: min, 1st quartile, median, mean, 3rd qurtile and max.\n#' @author Tobias Mortensen \\cr\n#' Department of mathematics and computer science (IMADA) \\cr\n#' University of southern Denmark, Odense \\cr\n#' \\email{tomor14@student.sdu.dk} \\cr\n#' @examples density.estimate(x=cars$dist, d=4, h=.8, method=\"naive\")\n\ndens.est <- function(x, d, h, method = \"naive\"){\n  if(method == \"naive\"){\n    # if h is not given:\n    if(missing(h)){\n      h <- (max(x)-min(x))/(1+log2(length(x)))    # Calculated by Sturges (p. 283 in Statistical Computation with R)\n    }\n    # if d is not given:\n    if(missing(d)){\n      px <- c(min(x), quantile(x, .25), quantile(x, .50), mean(x), quantile(x, .75), max(x))\n      py <- c(density.estimate(x, min(x), h), density.estimate(x, quantile(x, .25), h), density.estimate(x, quantile(x, .50), h), density.estimate(x, mean(x), h),density.estimate(x, quantile(x, .75), h),density.estimate(x, max(x), h))\n      dens <- data.frame(px, py)\n      row.names(dens) <- c(\"Min:\", \"1st quartile:\", \"Median:\", \"Mean:\", \"3rd quartile:\", \"Max:\")\n      colnames(dens) <- c(\"x\", \"y\")\n      cat(\"Bandwidth:\", h, \"\\n\")\n      return(dens)\n    }\n    # if d is given:\n    else{\n      w <- rep(0, length(x))\n      for(i in 1:length(x)){\n        if(abs((d-x[i])/h) < 1){ # weigth function\n          w[i] <- 1/2\n        }\n      }\n      dens <- 1/length(x)*sum(1/h*w)\n      return(dens)\n    }\n  }\n  else if(method == \"kernel\"){\n    # if h is not given:\n    if(missing(h)){\n      h <- .9*sd(x)*length(x)^(-1/5)    # Calculated by Silverman (p. 298 in Statistical Computation with R)\n    }\n    # if d is not given:\n    if(missing(d)){\n      px <- c(min(x), quantile(x, .25), quantile(x, .50), mean(x), quantile(x, .75), max(x))\n      py <- c(density.estimate(x, min(x), h, method = \"kernel\"), density.estimate(x, quantile(x, .25), h, method = \"kernel\"), density.estimate(x, quantile(x, .50), h, method = \"kernel\"), density.estimate(x, mean(x), h, method = \"kernel\"),density.estimate(x, quantile(x, .75), h, method = \"kernel\"),density.estimate(x, max(x), method = \"kernel\"))\n      dens <- data.frame(px, py)\n      row.names(dens) <- c(\"Min:\", \"1st quartile:\", \"Median:\", \"Mean:\", \"3rd quartile:\", \"Max:\")\n      colnames(dens) <- c(\"x\", \"y\")\n      cat(\"Bandwidth:\", h, \"\\n\")\n      return(dens)\n    }\n    w <- rep(0, length(x))\n    for(i in 1:length(x)){\n      w[i] <- 1/(sqrt(2*pi))*exp(-1/2*((d-x[i])/h)^2) # weigth function\n    }\n    dens <- 1/length(x)*sum(1/h*w)\n    return(dens)\n  }\n}\n",
    "created" : 1465470594987.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3083329722",
    "id" : "3FD271FB",
    "lastKnownWriteTime" : 1465516044,
    "path" : "~/Documents/Exam/R/dens.est.R",
    "project_path" : "R/dens.est.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}